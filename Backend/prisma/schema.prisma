generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  problems      Problem[]
  submission    Submission[]
  problemSolved problemSolved[]
  playlist      Playlist[]
  BookMarked    BookMarked[]

  // Subscription Models
  SubscriptionProblems    SubscriptionProblem[]
  SubscriptionSubmission  SubscriptionSubmission[]
  SubmissionProblemSolved SubscriptionproblemSolved[]
  SubscriptionPlaylist    SubscriptionPlaylist[]
  SubscriptionPurchase    SubscriptionPurchase[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @default(now())
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  submission       Submission[]
  solvedBy         problemSolved[]
  problemPlaylists ProblemInPlaylist[]
  BookMarked       BookMarked[]
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // if all test casses passes then accept otherwise wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testcase TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderror      String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model problemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model BookMarked {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String  @id @default(uuid())
  name        String
  description String?
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems ProblemInPlaylist[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model ProblemInPlaylist {
  id         String @id @default(uuid())
  playlistId String
  problemId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}

// Subscription Models

model SubscriptionProblem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String
  editorial          String
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @default(now())
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  submission       SubscriptionSubmission[]
  solvedBy         SubscriptionproblemSolved[]
  problemPlaylists ProblemInSubscriptionPlaylist[]
}

model SubscriptionSubmission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // if all test casses passes then accept otherwise wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  SubscriptionProblem SubscriptionProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testcase SubscriptionTestCaseResult[]
}

model SubscriptionTestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderror      String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  SubscriptionSubmission SubscriptionSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model SubscriptionproblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user    User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem SubscriptionProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model SubscriptionPlaylist {
  id          String  @id @default(uuid())
  name        String
  description String?
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems ProblemInSubscriptionPlaylist[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdByRole String @default("USER") // NEW field: who created this playlist (ADMIN or USER)

  SubscriptionPurchase SubscriptionPurchase[]

  @@unique([name, userId])
}

model ProblemInSubscriptionPlaylist {
  id         String @id @default(uuid())
  playlistId String
  problemId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist SubscriptionPlaylist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  SubscriptionProblem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}

model SubscriptionPurchase {
  id                String  @id @default(uuid())
  userId            String
  playlistId        String
  razorpayOrderId   String
  razorpayPaymentId String?
  status            String  @default("PENDING") // PENDING | SUCCESS | FAILED
  amount            Int
  currency          String  @default("INR")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlist SubscriptionPlaylist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([userId, playlistId]) // one user can buy a playlist only once
}
