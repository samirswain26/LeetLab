generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String?
  email     String    @unique
  image     String?
  role      UserRole  @default(USER)
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  problems  Problem[]
  submission Submission[]
  problemSolved problemSolved[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @default(now())
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  submission Submission[]
  solvedBy problemSolved[]
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String
  status        String // if all test casses passes then accept otherwise wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testcase TestCaseResult[]
}

model TestCaseResult{
  id String  @id @default(uuid())
  submissionId String
  testCase Int
  passed Boolean
  stdout String?
  expected String
  stderror String?
  compileOutput String?
  status String
  memory String?
  time String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model problemSolved{
  id String  @id @default(uuid())
  userId String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}